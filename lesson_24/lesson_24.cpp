//sizeof что это. sizeof c++ массив. Узнать количество элементов массива. sizeof array. Урок #28. - Видео 36.

#include<iostream>
using namespace std;

void main()
{
	setlocale(LC_ALL, "ru");

	//Размеры типа данных, сколько они занимают байт в памяти.
	//char = 1 байт.
	//int = 4 байта.
	//double = 8 байт.

	/*Если мы введём команду cout << sizeof(int) << endl; то получим информацию о типе данных int, о его размере.
	Размер типа данных int = 4 бай. К примеру размер типа данных double = 8 бай, так как данный тип данных хранит уже
	в себе дробные числа а не цельные. Также, мыжем написать вот так - int a; а потом cout <<sizeof(a) << endl;
	мы получим тотже результат в 4 байта. Одним словом, с помощью sizeof мы можем вычеслить что угодно, сколько
	выделенно байт под то или иной тип данных.*/
	int a;
	cout << "Размер типа данных int, переменной (а) - " << sizeof(a) << " байт" << endl;
	cout << endl;

	//Пример того как sizeof подсчитывает данные, а точнее показывает, сколько то или иное значение занимает памяти.
	cout << "Подсчитываем объм занятой памяти массивом." << endl;
	int arr1[]{ 5,68,135,1684,11 };
	cout << "Размер типа данных int, массива arr1 - " << sizeof(arr1) << " байт" << endl; 
	/* получаем 20. Почему 20 ? потому что 5 элементов по 4 байта, и в самом начале стоит тип данных int, значит все элементы в массиве типа int.*/
	cout << endl;

	//Как опеределить длинну массива (количество индексов)? 
	cout << "Пример определения длинны массива:" << endl;
	int arr2[]{ 5,68,135,1684,11 };
	cout << "Длинна массива arr2 равна = " << sizeof(arr2) / sizeof(int) << " - (количество индексов в массиве." << endl; 
	/*И получим 5. Почему? потомучто sizeof(arr) показывает сколько байт занимает все элементы масива указанные в нём,
	и при дилении на sizeof(int) он разделит количества элементов массива на его размери таким образом, получаем длянную
	массива.*/

	cout << endl;

	
	/*Если к примеру указать так
	for (int i = 0; i < 5; i++) где 5 количество элементов в масиве.
	{
		cout << arr[i] << endl;
	}
	На выходе мы получим данные в которые лежать в 5ти элементах массива.
	Но к примеру дан массив int arr[]{ 5,68,135,1684,11 };
	и мы захотели в нести туда данные, к примеру дописать 6й элемент - int arr[]{ 5,68,135,1684,11,69 };
	В таком случаи чтоб увидеть что находиться в элементе 6, надо и прописать в цикле 6.
	for (int i = 0; i < 6; i++) где 6 количество элементов в масиве.
	{
		cout << arr[i] << endl;
	}
	А если у нас много циклов? и везде менять значение в цикле?
	Вот чтоб с этим и не мучеться, везде прописываем sizeof(arr)/sizeof(arr[0]); в плане в любом цикле, и тогда не важно
	сколько элементов мы добавим в массив и когда, он сразу нужное количество подставит (посчитает) в цикл.
	Также, сам массив, можем поменять ему тип к примеру с int на double(double arr[]{ 5,68,135,1684,11 };)
	и у нас всё коректно отобразиться благодаря sizeof(arr)/sizeof(arr[0].
	Ниже уже реализованный пример.*/


	int arr[]{ 5,68.3,135,1684,11,52,69 };
	/*Данная замись - for (int i = 0; i < sizeof(arr)/sizeof(arr[0]); i++) а именно указание
	sizeof(arr)/sizeof(arr[0]), даёт возможность менять данные (вписать в массив ещё числа, и благодаря такой записи в цикле,
	мы сразу увидем что поменялось.*/
	for (int i = 0; i < sizeof(arr)/sizeof(arr[0]); i++)
	{
		cout << arr[i] << " ";
	}
	
	cout << "Объём массива в байтах: - " << sizeof(arr) << endl; 
	cout << "Длинна массива по количеству елементам: -  " << sizeof(arr) / sizeof(int) << endl;

}